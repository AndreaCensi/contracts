version: 2.1
parameters:
  context_name:
    type: string
    default: << pipeline.git.branch >>
workflows:
  version: 2
  test:
    jobs:
    - test-37-src:
        context: << pipeline.parameters.context_name >>
    - test-38-src:
        context: << pipeline.parameters.context_name >>
    - test-39-src:
        context: << pipeline.parameters.context_name >>
    - test-310-src:
        context: << pipeline.parameters.context_name >>
    - test-310-bin:
        context: << pipeline.parameters.context_name >>
    - test-311-src:
        context: << pipeline.parameters.context_name >>
    - test-311-bin:
        context: << pipeline.parameters.context_name >>
jobs:
  test-37-src:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.7:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          nosetests \
              --rednose --immediate \
              --cover-tests --with-coverage \
              --with-xunit --xunit-file=${xunit_output} \
              --cover-package=${COVER_PACKAGES} \
              contracts_tests
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small
  test-38-src:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.8:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          nosetests \
              --rednose --immediate \
              --cover-tests --with-coverage \
              --with-xunit --xunit-file=${xunit_output} \
              --cover-package=${COVER_PACKAGES} \
              contracts_tests
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small
  test-39-src:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.9:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          nosetests \
              --rednose --immediate \
              --cover-tests --with-coverage \
              --with-xunit --xunit-file=${xunit_output} \
              --cover-package=${COVER_PACKAGES} \
              contracts_tests
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small
  test-310-src:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.10:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          TEST_MODULES=$(split-tests <.circleci/contracts_tests.tests)
          echo "TEST_MODULES=[$TEST_MODULES]"
          if [ -z "$TEST_MODULES" ]; then
            echo "\$TEST_MODULES is empty"
            exit 0
          else
            echo "\$TEST_MODULES is NOT empty"
          fi
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          timeout 30m nose2 --with-coverage \
              --plugin nose2.plugins.junitxml \
              --junit-xml \
              --junit-xml-path ${xunit_output} \
              $TEST_MODULES
          # TODO: cover packages
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small
  test-310-bin:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.10:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          TEST_MODULES=$(split-tests <.circleci/contracts_tests.tests)
          echo "TEST_MODULES=[$TEST_MODULES]"
          if [ -z "$TEST_MODULES" ]; then
            echo "\$TEST_MODULES is empty"
            exit 0
          else
            echo "\$TEST_MODULES is NOT empty"
          fi
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          timeout 30m nose2 --with-coverage \
              --plugin nose2.plugins.junitxml \
              --junit-xml \
              --junit-xml-path ${xunit_output} \
              $TEST_MODULES
          # TODO: cover packages
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small
  test-311-src:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.11:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_SRC}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          TEST_MODULES=$(split-tests <.circleci/contracts_tests.tests)
          echo "TEST_MODULES=[$TEST_MODULES]"
          if [ -z "$TEST_MODULES" ]; then
            echo "\$TEST_MODULES is empty"
            exit 0
          else
            echo "\$TEST_MODULES is NOT empty"
          fi
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          timeout 30m nose2 --with-coverage \
              --plugin nose2.plugins.junitxml \
              --junit-xml \
              --junit-xml-path ${xunit_output} \
              $TEST_MODULES
          # TODO: cover packages
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small
  test-311-bin:
    environment:
      COLUMNS: '160'
      # default is /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      CONTEXT_NAME: << pipeline.parameters.context_name >>
      DEPS_INSTALL_TIMEOUT: 10m
      COVER_PACKAGES: contracts,contracts_tests
      TEST_PACKAGES: contracts_tests
    docker:
    - image: docker.io/${DOCKER_TARGET_ORG}/${DOCKER_REPO_PREFIX}zuper-ci-3.11:${Z_DISTRO}
      # auth:
      #   username: $DOCKER_USERNAME
      #   password: $DOCKER_PASSWORD
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Build statistics
        command: |
          set -x 
          mkdir -p build-stats
          # image_name=`cat /.circleci-runner-config.json | jq -r .Job.docker[0].Image | envsubst`
          # registry_to_login=`echo ${image_name} | cut -d'/' -f1`
          # regctl registry login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" "${registry_to_login}"

          # regctl manifest get --format raw-body "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-manifest.json
          # regctl image digest "${image_name}" > build-stats/jobs/${CIRCLE_JOB}/image-digest.txt
          # echo ${image_name} > build-stats/jobs/${CIRCLE_JOB}/image-name.txt

          mkdir -p build-stats/envs
          mkdir -p build-stats/jobs/${CIRCLE_JOB}
          mkdir -p build-stats/jobs/${CIRCLE_JOB}/envs
          echo -n "${Z_REQS_SHA:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/Z_REQS_SHA
          echo -n "${IMAGE_VCS_SHA:-not-present}" > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_VCS_SHA
          echo -n "${IMAGE_NAME:-not-present}"    > build-stats/jobs/${CIRCLE_JOB}/envs/IMAGE_NAME

    - store_artifacts:
        path: build-stats
        destination: build-stats
    - run:
        name: Install deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values install_requires < project.pp1.yaml > .requirements.txt
          python3 -m pip install -U pip
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements.txt
          rm .requirements.txt

    - run:
        name: Install testing deps
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt
          timeout ${DEPS_INSTALL_TIMEOUT} python3 -m pip install  -r .requirements_tests.txt
          rm .requirements_tests.txt

    - run:
        name: Python stats
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          pipdeptree >  build-stats/pipdeptree.txt
          python3 -m pip  list   | sort | tee  build-stats/pip-list.txt
          python3 -m pip  freeze | sort | tee  build-stats/pip-freeze.txt
          python3 -m pip cache list | tee  build-stats/pip-cache.txt


    - store_artifacts:
        path: build-stats
        destination: build-stats

    - run:
        name: setup.py develop
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          python3 -m pip install -e . --prefix ~/.local --no-deps

    - run:
        name: Make docs
        command: |
          FILE=src/conf.py
          mkdir -p out/docs
          if test -f "$FILE"; then
              sphinx-build src out/docs
          fi

    - store_artifacts:
        path: out/docs
        destination: docs
    - run:
        background: true
        name: services
        command: |
          TARGET=services
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    - run:
        name: pre-circle-tests
        command: |
          TARGET=pre-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi
    # - run:
    #     name: Notebooks
    #     command: |
    #       make -C notebooks cleanup all


    - run:
        name: contracts_tests
        command: |
          export PIP_INDEX_URL="${PIP_INDEX_URL_BIN}"
          echo PIP_INDEX_URL="${PIP_INDEX_URL}"
          set -euxo pipefail
          TEST_MODULES=$(split-tests <.circleci/contracts_tests.tests)
          echo "TEST_MODULES=[$TEST_MODULES]"
          if [ -z "$TEST_MODULES" ]; then
            echo "\$TEST_MODULES is empty"
            exit 0
          else
            echo "\$TEST_MODULES is NOT empty"
          fi
          mkdir -p out/test-results
          xunit_output=$PWD/out/test-results/nose-${CIRCLE_NODE_INDEX}-contracts_tests-xunit.xml
          timeout 30m nose2 --with-coverage \
              --plugin nose2.plugins.junitxml \
              --junit-xml \
              --junit-xml-path ${xunit_output} \
              $TEST_MODULES
          # TODO: cover packages
    - run:
        name: post-circle-tests
        command: |
          TARGET=post-circle-tests
          if make -n $TARGET ; then
              make $TARGET
          else
              echo "Target $TARGET not defined"
          fi

    - store_test_results:
        path: out/test-results

    - run:
        name: Coverage report
        when: always
        command: |
          coverage combine || true
          coverage html -d out/coverage/${CIRCLE_NODE_INDEX} || true
          coverage xml || true

    - store_artifacts:
        path: out/coverage
        destination: coverage

    - store_artifacts:
        path: out/tests
        destination: tests

    - run:
        name: CodeCov
        when: always
        command: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov  
    resource_class: small

# sigil 55b6534277ac7cf9ae6538eb103376f4
